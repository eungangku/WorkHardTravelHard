{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","todos","setTodos","saveTodos","newTodo","a","async","s","JSON","stringify","AsyncStorage","setItem","useEffect","getItem","loadedTodos","parse","loadTodos","View","style","styles","container","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","Date","now","finish","onChangeText","event","value","placeholder","input","ScrollView","Object","keys","map","key","todo","todoText","textDecorationLine","todoBtnContainer","finishTodo","MaterialIcons","name","size","Platform","OS","window","confirm","Alert","alert","deleteTodo","StatusBar","StyleSheet","create","flex","paddingHorizontal","backgroundColor","marginTop","flexDirection","justifyContent","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.b80e68af.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"#121212\",\r\n  gray: \"#413F42\",\r\n  todoBg: \"#454547\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View, TouchableOpacity, TextInput, ScrollView, Alert, Platform } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@todos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [todos, setTodos] = useState({});\n  const work = () => setWorking(true);\n  const travel = () => setWorking(false);\n  const onChangeText = (event) => setText(event);\n  const saveTodos = async (newTodo) => {\n    const s = JSON.stringify(newTodo);\n    await AsyncStorage.setItem(STORAGE_KEY, s);\n  };\n  const loadTodos = async () => {\n    const loadedTodos = await AsyncStorage.getItem(STORAGE_KEY);\n    if (loadedTodos) {\n      setTodos(JSON.parse(loadedTodos));\n    }\n  };\n  const addTodo = async () => {\n    const newTodo = Object.assign({}, { [Date.now()]: { text, working, finish: false } }, todos);\n    setTodos(newTodo);\n    await saveTodos(newTodo);\n    setText(\"\");\n  };\n  const deleteTodo = (key) => {\n    if (Platform.OS === \"web\") {\n      if (window.confirm(\"Are you sure you want to delete?\")) {\n        const newTodo = { ...todos };\n        delete newTodo[key];\n        setTodos(newTodo);\n        saveTodos(newTodo);\n      }\n    } else {\n      Alert.alert(\"Delete Todo\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"Delete\",\n          onPress: () => {\n            const newTodo = { ...todos };\n            delete newTodo[key];\n            setTodos(newTodo);\n            saveTodos(newTodo);\n          },\n        },\n      ]);\n    }\n  };\n  const finishTodo = (key) => {\n    if (todos[key].finish === true) {\n      const newTodo = { ...todos };\n      newTodo[key].finish = false;\n      setTodos(newTodo);\n      saveTodos(newTodo);\n    } else {\n      const newTodo = { ...todos };\n      newTodo[key].finish = true;\n      setTodos(newTodo);\n      saveTodos(newTodo);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{ fontSize: 38, fontWeight: \"600\", color: working ? \"white\" : theme.gray }}>Work</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text style={{ fontSize: 38, fontWeight: \"600\", color: working ? theme.gray : \"white\" }}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput onSubmitEditing={addTodo} onChangeText={onChangeText} value={text} placeholder={working ? \"What are you going to do?\" : \"Where do you want to travel?\"} style={styles.input}></TextInput>\n      <ScrollView>\n        {Object.keys(todos).map((key) =>\n          working === todos[key].working ? (\n            <View key={key} style={styles.todo}>\n              <Text style={{ ...styles.todoText, textDecorationLine: todos[key].finish ? \"line-through\" : null, color: todos[key].finish ? \"#ADADAD\" : \"white\" }}>{todos[key].text}</Text>\n              <View style={styles.todoBtnContainer}>\n                <TouchableOpacity onPress={() => finishTodo(key)}>\n                  <MaterialIcons name=\"check-circle\" size={24} color=\"white\" />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => deleteTodo(key)}>\n                  <MaterialIcons name=\"delete\" size={24} color=\"white\" />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : (\n            <View></View>\n          )\n        )}\n      </ScrollView>\n      <StatusBar style=\"light\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 25,\n    backgroundColor: theme.bg,\n  },\n  header: {\n    marginTop: 100,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  todo: {\n    backgroundColor: theme.todoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  todoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  todoBtnContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n"],"sourceRoot":""}